@page "/admin/usermanage"
@using BLX.Models
@using Microsoft.EntityFrameworkCore;
@inject BLXContext _context
@layout AdminManage
@using OfficeOpenXml 
@using Microsoft.AspNetCore.Components.Forms
@using System
@using System.IO
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@inject IWebHostEnvironment _env
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject IHttpClientFactory Http
@inject IWebHostEnvironment webHostEnvironment

<style>
    .btn {
        margin: 0 3px;
    }

    .table-data{
        height: 70vh; 
        overflow-y: auto;
    }

    .badge-primary {
        background-color: #007bff; /* Màu nền cho Tổng thí sinh */
        color: #fff;
    }

    .badge-info {
        background-color: #17a2b8; /* Màu nền cho Chưa thi */
        color: #fff;
    }

    .badge-success {
        background-color: #28a745; /* Màu nền cho Đạt */
        color: #fff;
    }

    .badge-danger {
        background-color: #dc3545; /* Màu nền cho Không đạt */
        color: #fff;
    }
    @@media (min-width: 1366px){
        .table-data {
            height: 64vh; 
        }
    }
</style>
<button class="btn btn-primary mb-3" @onclick="ShowAddUserModal">+ Thêm thí sinh</button>
<button class="btn btn-primary mb-3" @onclick="ImportExcel">Import Excel</button>
<InputFile OnChange="HandleFileSelected" />

<div class="form-group">
    <div>
        <label for="classFilter">Lọc theo lớp:</label>
        <select id="classFilter" class="form-control" @onchange="FilterUsersByClass">
            @foreach (var item in semesters)
            {
                <option value="@item.Id">@item.Name</option>
            } 
        </select>
    </div>
    <div class="ml-auto">
        <span class="badge badge-primary">Tổng thí sinh: @Tong</span>
        <span class="badge badge-info">Chưa thi: @ChuaThi</span>
        <span class="badge badge-success">Đạt: @Dat</span>
        <span class="badge badge-danger">Không đạt: @KhongDat</span>
    </div>
</div>

@if (users == null)
{
    <p><em>Không có thí sinh nào</em></p>
}
else
{
    <div class="table-data">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Họ tên</th>
                    <th>Số báo danh</th>
                    <th>CCCD</th>
                    <th>Ngày sinh</th>
                    <th>Lớp</th>
                    <th>Trạng thái</th>
                    <th>Hạng GPLX</th>
                    <th>Điểm</th>
                    <th>Kết quả</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Name</td>
                        <td>@user.Sbd</td>
                        <td>@user.Cccd</td>
                        <td>@DateTime.Parse(user.NamSinh.ToString()).ToString("dd/MM/yyyy")</td>
                        <td>@user.Semester.Name</td>
                        <td>
                            @if (user.Status)
                            {
                                <span>Đã thi</span>
                            }
                            else
                            {
                                <span>Chưa thi</span>
                            }
                        </td>
                        <td>@user.Semester.Rank</td>
                        <td>
                            @user.Score
                        </td>
                        <td>
                            @if (user.Result == true)
                            {
                                <span>Đạt</span>
                            }
                            @if (user.Result == false)
                            {
                                <span>Không đạt</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => ShowEditUserModal()">Sửa</button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => RestUser(user.Id)">Tạo lại</button>
                            <button class="btn btn-info btn-sm" @onclick="() => ExportPDF(user.Id)">Xuất pdf</button>
                        </td>
                    </tr>   
                }
            </tbody>
        </table>
    </div>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @for (int i = 1; i <= Math.Ceiling((decimal)totalUsersCount / pageSize); i++)
            {
                int pageNumber = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@i</button>
                </li>
            }
        </ul>
    </nav>
}
<MessageBox Title="Cảnh báo" Message="@message" Show="@showOkMessageBox" OnOk="HandleOkClick" />

@code {
    private List<User> users;
    private List<User> filteredUsers;
    private List<Semester> semesters;
    private string searchTerm = string.Empty;
    private bool showOkMessageBox = false;
    private User selectedUser;
    private bool showModal;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalUsersCount = 0;
    private IBrowserFile file;
    private Guid selectedClassId;
    private string message;
    private int KhongDat;
    private int Dat;
    private int ChuaThi;
    private int Tong;
    protected override async Task OnInitializedAsync()
    {
        semesters = _context.Semesters.Where(x => x.Status == true).ToList();
        if (selectedClassId == Guid.Empty)
        {
            selectedClassId = semesters.FirstOrDefault().Id;
        }
        totalUsersCount = _context.Users.Count(x => x.SemesterId == selectedClassId && x.Semester.Status == true);

        int skip = (currentPage - 1) * pageSize;
        users = _context.Users.Include(x => x.UserQuestions).Include(x => x.Semester).Where(x => x.SemesterId == selectedClassId && x.Semester.Status == true).OrderBy(x => x.Sbd).Skip(skip).Take(pageSize).ToList();
        
        Tong = _context.Users.Where(x => x.SemesterId == selectedClassId).Count();
        ChuaThi = _context.Users.Where(x => x.SemesterId == selectedClassId).Where(x => x.Result == null).Count();
        Dat = _context.Users.Where(x => x.SemesterId == selectedClassId).Where(x => x.Result == true).Count();
        KhongDat = _context.Users.Where(x => x.SemesterId == selectedClassId).Where(x => x.Result == false).Count();
    }
    private void FilterUsersByClass(ChangeEventArgs e)
    {
        selectedClassId = Guid.Parse(e.Value?.ToString());
        currentPage = 1;
        OnInitializedAsync();
        // int skip = (currentPage - 1) * pageSize;
        // users = _context.Users.Include(x => x.UserQuestions).Include(x => x.Semester).Where(x => x.SemesterId == selectedClassId).Skip(skip).Take(pageSize).ToList();

    }
    private void ChangePage(int pageNumber)
    {
        currentPage = pageNumber;
        OnInitializedAsync();
    }

    private void ShowAddUserModal()
    { }
    private void ShowEditUserModal()
    { }
    private async void ExportPDF(Guid Id)
    {
        var user = _context.Users.Include(x => x.Semester).Include(x => x.UserQuestions).ThenInclude(x => x.IdQuestionNavigation).ThenInclude(x => x.TypeNavigation).FirstOrDefault(x => x.Id == Id && x.Semester.Status == true);
        if (user != null && user.Status)
        {
            user.UserQuestions = user.UserQuestions.OrderBy(uq => uq.Number).ToList();
            string fileName = $"{user.Name}_{DateTime.Now:yyyyMMddHHmmss}.pdf"; 
            string dest = Path.Combine(Path.GetTempPath(), fileName);

            using (FileStream fs = new FileStream(dest, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                Document document = new Document();
                PdfWriter writer = PdfWriter.GetInstance(document, fs);
                document.Open();
                string fontPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "font", "times.ttf"); 

                // Load the font
                BaseFont baseFont = BaseFont.CreateFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                Font font = new Font(baseFont, 14, Font.NORMAL);
                Font fontTable = new Font(baseFont, 12, Font.NORMAL);
                Font fontItalic = new Font(baseFont, 14, Font.NORMAL);

                Font fontNormal = new Font(baseFont, 12, Font.NORMAL);
                Font fontBold = new Font(baseFont, 12, Font.BOLD);
                Font fontTitle = new Font(baseFont, 20, Font.BOLD);
                Font fontColor = new Font(baseFont, 12, Font.BOLDITALIC, BaseColor.BLACK);
                // Add header
                PdfPTable table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.SetWidths(new float[] { 1f, 1f });

                PdfPCell cell1 = new PdfPCell();
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Border = PdfPCell.NO_BORDER;
                Phrase phrase1 = new Phrase();
                phrase1.Add(new Chunk("SỞ GIAO THÔNG VẬN TẢI QUẢNG TRỊ\n", fontNormal));
                phrase1.Add(new Chunk("TRƯỜNG TCN GTVT", fontBold).SetUnderline(0.1f, -1));
                Paragraph p1 = new Paragraph(phrase1);
                p1.Alignment = Element.ALIGN_CENTER;
                cell1.AddElement(p1);
                table1.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell();
                cell2.HorizontalAlignment = Element.ALIGN_CENTER;
                cell2.Border = PdfPCell.NO_BORDER;
                Phrase phrase2 = new Phrase();
                phrase2.Add(new Chunk("CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM\n", fontBold));
                phrase2.Add(new Chunk("Độc lập - Tự do - Hạnh phúc", fontBold).SetUnderline(0.1f, -1));
                Paragraph p2 = new Paragraph(phrase2);
                p2.Alignment = Element.ALIGN_CENTER;
                cell2.AddElement(p2);
                table1.AddCell(cell2);

                document.Add(table1);

                // Add the title
                Paragraph titleParagraph = new Paragraph("BÀI KIỂM TRA KẾT THÚC MÔN HỌC LÝ THUYẾT", fontTitle);
                titleParagraph.Alignment = Element.ALIGN_CENTER;
                document.Add(titleParagraph);

                // Add personal information
                document.Add(new Paragraph("\nHọ và tên: " + user.Name, fontBold));
                document.Add(new Paragraph("Ngày sinh: " + DateTime.Parse(user.NamSinh.ToString()).ToString("dd/MM/yyyy"), fontNormal));
                document.Add(new Paragraph("Số CCCD: " + user.Cccd, fontNormal));
                document.Add(new Paragraph("Hạng GPLX: " + user.Semester.Rank, fontNormal));
                document.Add(new Paragraph("Khóa đào tạo: " + user.Semester.Name, fontNormal));
                document.Add(new Paragraph("Ngày kiểm tra: " + DateTime.Parse(user.Semester.TestDay.ToString()).ToString("dd/MM/yyyy"), fontNormal));
                document.Add(new Paragraph("Số báo danh: " + user.Sbd, fontNormal));
                document.Add(new Paragraph("Tại: Trường TCN GTVT Quảng Trị\n\n", fontNormal));

                if(user.UserQuestions.FirstOrDefault(x => x.Number == 2).Status == false)
                {
                    Chunk chunk = new Chunk("(Trả lời sai Câu mất an toàn giao thông nghiêm trọng câu số 2)", fontColor);
                    Paragraph p3 = new Paragraph(chunk);
                    document.Add(p3);
                }

                document.Add(new Paragraph("Ghi chú:     Đ: Đáp án đúng     X: Ý trả lời đúng     S: Ý trả lời sai\n\n", fontItalic));

                int maxHorizontal = user.UserQuestions.Count(); // Maximum number of columns per table
                int maxVertical = 4;    // Maximum number of rows per table

                int totalColumns = user.UserQuestions.Count();  // Number of columns to render
                int totalRows = 4;      // Number of rows to render

                // Create a main table
                PdfPTable mainTable = new PdfPTable(20);
                mainTable.WidthPercentage = 100;
                // Header row for questions
                for (int col = 1; col <= totalColumns; col++)
                {
                    if (col <= 20)
                    {
                        PdfPCell cell = new PdfPCell(new Phrase($"{col}", new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD)));
                        cell.HorizontalAlignment = Element.ALIGN_CENTER;
                        mainTable.AddCell(cell);
                    }
                }

                // Body rows for answers
                for (int row = 1; row <= totalRows; row++)
                {
                    foreach (var item in user.UserQuestions)
                    {
                        if(item.Number <= 20)
                        {
                            if (item.Reply == row)
                            {
                                if (item.IdQuestionNavigation.Answers == row)
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("X", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable.AddCell(cell);
                                }
                                else
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("S", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable.AddCell(cell);
                                }
                            }
                            else
                            {
                                if (item.IdQuestionNavigation.Answers == row)
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("Đ", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable.AddCell(cell);
                                }
                                else
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase(" ", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable.AddCell(cell);
                                }
                            }
                        }
                    }
                }
                // Add the main table to the document
                document.Add(mainTable);

                PdfPTable spacerTable = new PdfPTable(1);
                spacerTable.WidthPercentage = 100;
                PdfPCell spacerCell = new PdfPCell(new Phrase(" "));
                spacerCell.Border = PdfPCell.NO_BORDER;
                spacerCell.FixedHeight = 20f; 
                spacerTable.AddCell(spacerCell);
                document.Add(spacerTable);

                // Create a main table
                PdfPTable mainTable1 = new PdfPTable(totalColumns - 20);
                mainTable1.WidthPercentage = 100;
                // Header row for questions
                for (int col = 1; col <= totalColumns; col++)
                {
                    if (col > 20)
                    {
                        PdfPCell cell = new PdfPCell(new Phrase($"{col}", new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD)));
                        cell.HorizontalAlignment = Element.ALIGN_CENTER;
                        mainTable1.AddCell(cell);
                    }
                }

                // Body rows for answers
                for (int row = 1; row <= totalRows; row++)
                {
                    foreach (var item in user.UserQuestions)
                    {
                        if(item.Number > 20)
                        {
                            if (item.Reply == row)
                            {
                                if (item.IdQuestionNavigation.Answers == row)
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("X", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable1.AddCell(cell);
                                }
                                else
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("S", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable1.AddCell(cell);
                                }
                            }
                            else
                            {
                                if (item.IdQuestionNavigation.Answers == row)
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase("Đ", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable1.AddCell(cell);
                                }
                                else
                                {
                                    PdfPCell cell = new PdfPCell(new Phrase(" ", fontTable));
                                    cell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    mainTable1.AddCell(cell);
                                }
                            }
                        }
                    }
                }
                document.Add(mainTable1);

                // Add conclusion section
                PdfPTable table2 = new PdfPTable(2);
                table2.WidthPercentage = 100;
                table2.SetWidths(new float[] { 1f, 1f });

                // Cell 3 (left-aligned)
                PdfPCell cell3 = new PdfPCell();
                cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                cell3.Border = PdfPCell.NO_BORDER;
                Phrase phrase3 = new Phrase();
                phrase3.Add(new Chunk("\nKết luận:\n", fontBold));
                phrase3.Add(new Chunk("Số điểm đạt được: " + user.Score + " điểm\n", fontNormal));

                if(user.Result == true)
                {
                    phrase3.Add(new Chunk("Đạt       ", fontBold));
                    phrase3.Add(new Chunk("X", fontBold));
                    phrase3.Add(new Chunk("       Không đạt    ", fontBold));
                    phrase3.Add(new Chunk("", fontBold));
                }
                else
                {
                    phrase3.Add(new Chunk("Đạt:       ", fontBold));
                    phrase3.Add(new Chunk("", fontBold));
                    phrase3.Add(new Chunk("       Không đạt:    ", fontBold));
                    phrase3.Add(new Chunk("X", fontBold));
                }
                
                phrase3.Add(new Chunk("\n \n         Giáo viên", fontNormal));
                Paragraph p4 = new Paragraph(phrase3);
                p4.Alignment = Element.ALIGN_LEFT;
                cell3.AddElement(p4);
                table2.AddCell(cell3);

                // Cell 4 (right-aligned)
                PdfPCell cell4 = new PdfPCell();
                cell4.HorizontalAlignment = Element.ALIGN_LEFT;
                cell4.Border = PdfPCell.NO_BORDER;
                Phrase phrase4 = new Phrase();
                phrase4.Add(new Chunk("\n \n \n \n \n                                 Học viên xác nhận kết quả", fontNormal));
                Paragraph p5 = new Paragraph(phrase4);
                p5.Alignment = Element.ALIGN_LEFT;
                cell4.AddElement(p5);
                table2.AddCell(cell4);
                document.Add(table2);
                document.Close();
                writer.Close();
            }
            byte[] fileBytes = await File.ReadAllBytesAsync(dest);
            await jsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        }
        else
        {
            message = "Chức năng không hoạt động vì thí sinh chưa thi";
            showOkMessageBox = true;
        }
    }

    private void RestUser(Guid Id)
    { 
        var user = _context.Users.Include(x => x.Semester).FirstOrDefault(x => x.Id == Id && x.Semester.Status == true);
        @if (user.Status == true)
        {
            user.Status = false;
            user.Score = null;
            user.Result = null;
            _context.Update(user);
            _context.SaveChanges();

            var userQuestions = _context.UserQuestions.Where(x => x.IdUser == user.Id).ToList();
            _context.UserQuestions.RemoveRange(userQuestions);
            _context.SaveChanges();
        }
        else
        {
            message = "Chức năng không hoạt động vì thí sinh chưa thi";
            showOkMessageBox = true;
        }
    }

    public void HandleOkClick()
    {
        showOkMessageBox = false;
    }
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var allowedExtensions = new[] { ".xls", ".xlsx" };
        var fileExtension = System.IO.Path.GetExtension(e.File.Name);
        if (allowedExtensions.Contains(fileExtension))
        {
            file = e.File;
        }
        else
        {
            message = "Vui lòng chỉ chọn file excel!!";
            showOkMessageBox = true;
            file = null;
        }
    }
    private async Task ImportExcel()
    {
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(stream);

                var dataTable = ReadExcelToUsers(stream);

                await SaveToSql(dataTable);
            }
        }
        else
        {
            message = "Vui lòng chọn một excel file để import";
            showOkMessageBox = true;
        }
    }

    private List<User> ReadExcelToUsers(Stream stream)
    {
        List<User> users = new List<User>();
        using (var package = new ExcelPackage(stream))
        {
            var worksheet = package.Workbook.Worksheets.FirstOrDefault();
            if (worksheet == null)
                throw new Exception("No worksheet found in Excel file.");

            for (int rowNumber = 2; rowNumber <= worksheet.Dimension.End.Row; rowNumber++)
            {
                var row = worksheet.Cells[rowNumber, 1, rowNumber, worksheet.Dimension.End.Column];
                var user = new User
                {
                    Id = Guid.NewGuid(),
                    Sbd = int.Parse(row[rowNumber, 1].Text),
                    Name = row[rowNumber, 2].Text,
                    Cccd = row[rowNumber, 3].Text,
                    NamSinh = DateTime.TryParse(row[rowNumber, 4].Text, out var dob) ? (DateTime?)dob : null,
                    SemesterId = Guid.Parse(row[rowNumber, 5].Text),
                    Status = false,
                    Score =  null
                };

                users.Add(user);
            }
        }
        return users;
    }

    private async Task SaveToSql(List<User> users)
    {
        foreach (var item in users)
        {
            _context.Add(item);
            _context.SaveChanges();
        }
        message = "Import thông tin thí sinh thành công!!";
        showOkMessageBox = true;
        OnInitializedAsync();
    }
}
