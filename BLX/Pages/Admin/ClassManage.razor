@using Microsoft.EntityFrameworkCore;
@using BLX.Models
@using OfficeOpenXml;
@layout AdminManage
@inject BLXContext _context
@inject IJSRuntime jsRuntime
<style>
    .btn-sm {
        margin: 0 3px;
    }

    .table-data {
        height: 70vh;
        overflow-y: auto;
    }

    .dropdown-item{
        cursor: pointer;
    }

    @@media (min-width: 1366px) {
        .table-data {
            height: 64vh;
        }
    }
</style>
<button class="btn btn-primary mb-3" @onclick="ShowPopup">+ Thêm lớp mới</button>

@if (semesters == null)
{
    <p><em>Không có lớp nào...</em></p>
}
else
{
    <div class="table-data">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Mã lớp</th>
                    <th>Tên lớp</th>
                    <th>Hạng GPLX</th>
                    <th>Ngày thi</th>
                    <th>Trạng thái</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in semesters)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Rank</td>
                        <td>@DateTime.Parse(item.TestDay.ToString()).ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (item.Status == true)
                            {
                                <span>Đang hoạt động</span>
                            }
                            else
                            {
                                <span>Đã đóng</span>
                            }
                        </td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown">
                                    Thao tác
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" @onclick="() => ChangeStatus(true, item.Id)">Mở lớp</a></li>
                                    <li><a class="dropdown-item" @onclick="() => ChangeStatus(false, item.Id)">Đóng lớp</a></li>
                                    <li><a class="dropdown-item" @onclick="() => ExportExcel(item.Id)">Xuất Excel</a></li>
                                    <li><a class="dropdown-item" @onclick="() => DeleteClass(item.Id)">Xóa lớp</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @for (int i = 1; i <= Math.Ceiling((decimal)totalUsersCount / pageSize); i++)
            {
                int pageNumber = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@i</button>
                </li>
            }
        </ul>
    </nav>
}
<CreateSemesterPopup @ref="createSemesterPopup" OnClose="Reload"></CreateSemesterPopup>
<MessageBox Title="Thông báo" Message="Bạn chắc chắn muốn xóa lớp học này?" Show="@showYesNoMessageBox" OnYes="HandleYesClick" OnNo="HandleNoClick" />

@code {
    private List<Semester> semesters;
    private string searchTerm = string.Empty;
    private bool showOkMessageBox = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalUsersCount = 0;
    private string message;
    private bool showYesNoMessageBox = false;
    protected override async Task OnInitializedAsync()
    {
        totalUsersCount = _context.Semesters.Count();

        int skip = (currentPage - 1) * pageSize;
        semesters = _context.Semesters.Skip(skip).Take(pageSize).ToList();
    }
    private void ChangePage(int pageNumber)
    {
        currentPage = pageNumber;
        OnInitializedAsync();
    }

    private void ChangeStatus(bool status, Guid Id)
    {
        var item = _context.Semesters.FirstOrDefault(x => x.Id == Id);
        item.Status = status;
        _context.Update(item);
        _context.SaveChanges();
        OnInitializedAsync();
    }
    CreateSemesterPopup createSemesterPopup;

    void ShowPopup()
    {
        createSemesterPopup.Show();
    }

    void Reload()
    {
        OnInitializedAsync();
        StateHasChanged();
    }
    public Guid IdClass = new Guid();
    public async void ExportExcel(Guid Id)
    {
        byte[] fileContents;
        var data = await _context.Users.Include(x => x.UserQuestions).Include(x => x.Semester).Where(x => x.SemesterId == Id && x.Semester.Status == true).OrderBy(x => x.Sbd).ToListAsync();
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Sheet1");

            // Header
            worksheet.Cells[1, 1].Value = "Số báo danh";
            worksheet.Cells[1, 2].Value = "Họ và tên";
            worksheet.Cells[1, 3].Value = "Cccd";
            worksheet.Cells[1, 4].Value = "Năm sinh";
            worksheet.Cells[1, 5].Value = "Lớp";
            worksheet.Cells[1, 6].Value = "Điểm";
            worksheet.Cells[1, 7].Value = "Kết quả";

            // Data
            for (int i = 0; i < data.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = data[i].Sbd;
                worksheet.Cells[i + 2, 2].Value = data[i].Name;
                worksheet.Cells[i + 2, 3].Value = data[i].Cccd;
                worksheet.Cells[i + 2, 4].Value = data[i].NamSinh.HasValue ? data[i].NamSinh.Value.ToString("yyyy-MM-dd") : "";
                worksheet.Cells[i + 2, 5].Value = data[i].Semester.Name;
                worksheet.Cells[i + 2, 6].Value = data[i].Score;
                worksheet.Cells[i + 2, 7].Value = data[i].Result == true ? "Đạt" : "Không đạt";
            }

            fileContents = package.GetAsByteArray();
        }
        var base64 = Convert.ToBase64String(fileContents);
        var fileName = $"{data.FirstOrDefault().Semester.Name}_{DateTime.Now:yyyyMMddHHmmss}.xlsx";

        await jsRuntime.InvokeAsync<object>("downloadFile", fileName, base64);
    }
    public void DeleteClass(Guid Id)
    {
        showYesNoMessageBox = true;
        IdClass = Id;
    }
    public void HandleYesClick()
    {
        if (IdClass == Guid.Empty)
        {
            showYesNoMessageBox = false;
            this.StateHasChanged();
            return;
        }
        var semester = _context.Semesters
                              .Include(s => s.Users)
                              .ThenInclude(u => u.UserQuestions)
                              .FirstOrDefault(s => s.Id == IdClass);
        if (semester != null)
        {
            _context.RemoveRange(semester.Users.SelectMany(u => u.UserQuestions));
            _context.RemoveRange(semester.Users);
            _context.Remove(semester);
            _context.SaveChanges();
            OnInitializedAsync();
        }

        showYesNoMessageBox = false;
        this.StateHasChanged();
    }
    public void HandleNoClick()
    {
        showYesNoMessageBox = false;
        this.StateHasChanged();
    }
}
