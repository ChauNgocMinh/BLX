// <auto-generated />
using System;
using BLX.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BLX.Migrations
{
    [DbContext(typeof(BLXContext))]
    partial class BLXContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BLX.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Answers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("NumberAnswers")
                        .HasColumnType("int");

                    b.Property<Guid>("Type")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("BLX.Models.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TestDay")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("BLX.Models.TypeQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypeQuestion", (string)null);
                });

            modelBuilder.Entity("BLX.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CCCD");

                    b.Property<DateTime?>("NamSinh")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<bool?>("Result")
                        .HasColumnType("bit");

                    b.Property<int>("Sbd")
                        .HasColumnType("int")
                        .HasColumnName("SBD");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BLX.Models.UserQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.Property<int?>("Reply")
                        .HasColumnType("int")
                        .HasColumnName("Reply");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestion");

                    b.HasIndex("IdUser");

                    b.ToTable("UserQuestion", (string)null);
                });

            modelBuilder.Entity("BLX.Models.Question", b =>
                {
                    b.HasOne("BLX.Models.TypeQuestion", "TypeNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_Question_TypeQuestion");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("BLX.Models.User", b =>
                {
                    b.HasOne("BLX.Models.Semester", "Semester")
                        .WithMany("Users")
                        .HasForeignKey("SemesterId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Semester");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BLX.Models.UserQuestion", b =>
                {
                    b.HasOne("BLX.Models.Question", "IdQuestionNavigation")
                        .WithMany("UserQuestions")
                        .HasForeignKey("IdQuestion")
                        .IsRequired()
                        .HasConstraintName("FK_UserQuestion_Question");

                    b.HasOne("BLX.Models.User", "IdUserNavigation")
                        .WithMany("UserQuestions")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_UserQuestion_User");

                    b.Navigation("IdQuestionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BLX.Models.Question", b =>
                {
                    b.Navigation("UserQuestions");
                });

            modelBuilder.Entity("BLX.Models.Semester", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BLX.Models.TypeQuestion", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BLX.Models.User", b =>
                {
                    b.Navigation("UserQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
