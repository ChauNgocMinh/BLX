@if (Show)
{
    <div class="message-box">
        <div class="message-box-content">
            <div class="message-box-header">
                <p class="m-0">@Title</p>
            </div>
            <div class="message-box-body">
                <p>@Message</p>
            </div>
            <div class="message-box-footer">
                @if (OnYes.HasDelegate && OnNo.HasDelegate)
                {
                    <button class="btn btn-primary" @onclick="() => HandleYesClick(true)">Yes</button>
                    <button class="btn btn-secondary" @onclick="() => HandleNoClick(false)">No</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="() => HandleOkClick(true)">OK</button>
                }
            </div>
        </div>
    </div>
}
<style>
    .message-box {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .message-box-content {
        background-color: white;
        width: 400px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .message-box-header {
        background-color: #f1f1f1;
        padding: 5px 10px;
        border-bottom: 1px solid #ccc;
    }

    .message-box-header p {
        font-weight: bold;
    }

    .message-box-body {
        padding: 15px;
        text-align: left;
        flex: 1;
    }

    .message-box-footer {
        padding: 5px 10px;
        background-color: #f1f1f1;
        border-top: 1px solid #ccc;
        text-align: right;
    }

    .message-box-footer button {
        margin-left: 10px;
        padding: 2px 12px;
    }
</style>



@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string Message { get; set; }
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<bool> OnYes { get; set; }
    [Parameter] public EventCallback<bool> OnNo { get; set; }
    [Parameter] public EventCallback<bool> OnOk { get; set; }

    private void HandleYesClick(bool result)
    {
        OnYes.InvokeAsync(result);
        Show = false;
    }

    private void HandleNoClick(bool result)
    {
        OnNo.InvokeAsync(result);
        Show = false;
    }

    private void HandleOkClick(bool result)
    {
        OnOk.InvokeAsync(result);
        Show = false;
    }
}

